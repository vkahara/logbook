 tai palauta 404-virhe, jos sitä ei ole olemassa
    event = get_object_or_404(Event, id=event_id)

    user = request.user
    logbook = Logbook.objects.filter(event=event, user=user).first()

    # Jos käyttäjä avaa eventin ensimmäistä kertaa luodaan uusi lokikirja
    if not logbook:
        logbook = Logbook.objects.create(event=event, user=user)

    form = LogbookPostForm()
    if request.method == "POST":
        form = LogbookPostForm(request.POST)
        if form.is_valid():
            message = form.cleaned_data["message"]
            LogEntry.objects.create(logbook=logbook, user=user, message=message)
            return redirect("lokikirja_app:logbook_detail", event_id=event_id)

    logbooks = Logbook.objects.filter(event=event)
    mirror_logbook = MirrorLogbook.objects.get(user=user)
    mirrored_logbooks = mirror_logbook.mirrored_logbooks.filter(event=event)
    # Hae ja järjestä kaikki logbookin merkinnät luontiajan mukaan
    logbook_entries = logbook.log_entries.all().order_by('created_at')

    for mirrored_logbook in mirrored_logbooks:
        if mirrored_logbook.event == event:
            logbook_entries = logbook_entries | mirrored_logbook.log_entries.all().order_by('created_at')

    return render(
        request,
        "lokikirja_app/logbook_detail.html",
        {
            "logbook_entries": logbook_entries,
            "form": form,
            "event": event,
            "logbooks": logbooks,
        },
    )


@login_required
def toggle_mirror(request, logbook_id):
    """Asettaa tai poistaa peilauksen valitusta lokikirjasta.

    Args:
        request: Pyynnön olio.
        logbook_id: Lokikirjan id.

    Returns:
        Uudelleenohjaus takaisin logbook_detail-näkymään.
    """
    logbook = get_object_or_404(Logbook, id=logbook_id)
    mirror_logbook, _ = MirrorLogbook.objects.get_or_create(user=request.user)
    if logbook in mirror_logbook.mirrored_logbooks.all():
        