öityminen onnistui, 
        muutoin palautetaan takaisin rekisteröitymissivulle.
    """
    if request.method == "POST":
        form = UserCreationForm(request.POST)
        if form.is_valid():
            user = form.save()
            MirrorLogbook.objects.create(user=user)
            username = form.cleaned_data.get('username')
            raw_password = form.cleaned_data.get('password1')
            user = authenticate(username=username, password=raw_password)
            login(request, user)
            return redirect('/')
        else:
            messages.error(request, 'Virhe kirjautumisessa, tarkasta salasanavaatimukset.')
    else:
        form = UserCreationForm()
    return render(request, 'lokikirja_app/register.html', {'form': form})


@login_required
def index(request):
    """Näyttää kaikki tapahtumat.

    Args:
        request: Pyynnön olio.

    Returns:
        Renderöi index-sivun, jossa näytetään kaikki tapahtumat.
    """
    events = Event.objects.all()
    return render(request, "lokikirja_app/index.html", {"events": events})


@login_required
def create_event(request):
    """Luo uuden tapahtuman.

    Args:
        request: Pyynnön olio.

    Returns:
        Palauttaa käyttäjän etusivulle jos tapahtuman luominen onnistui, 
        muutoin palautetaan takaisin tapahtuman luomissivulle.
    """
    if request.method == "POST":
        form = EventForm(request.POST)
        if form.is_valid():
            form.save()
            return redirect("lokikirja_app:index")
    else:
        form = EventForm()

    return render(request, "lokikirja_app/create_event.html", {"form": form})


@login_required
def logbook_detail(request, event_id):
    """Näyttää tietyn lokikirjan tiedot.

    Args:
        request: Pyynnön olio.
        event_id: Tapahtuman id.

    Returns:
        Renderöi logbook_detail-sivun, jossa näytetään tietyn lokikirjan tiedot.
    """
    # Hae tapahtuma