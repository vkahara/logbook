--- FILENAME: views.py
from django.contrib.auth.decorators import login_required
from django.contrib.auth import authenticate, login
from django.contrib.auth.forms import UserCreationForm, AuthenticationForm
from django.contrib import messages
from django.shortcuts import get_object_or_404, redirect, render
from .models import Event, LogEntry, Logbook, MirrorLogbook
from .forms import EventForm, LogbookPostForm

def login_view(request):
    """Käsittelee käyttäjän kirjautumisen.

    Käyttäjä täyttää lomakkeen tiedot ja lähettää ne. Jos tiedot ovat kelvolliset,
    käyttäjä kirjataan sisään. Jos tiedot eivät ole kelvolliset, näytetään virheviesti.

    Args:
        request: Pyynnön olio.

    Returns:
        Palauttaa käyttäjän etusivulle jos kirjautuminen onnistui, 
        muutoin palautetaan takaisin kirjautumissivulle.
    """
    if request.method == "POST":
        form = AuthenticationForm(request, data=request.POST)
        if form.is_valid():
            username = form.cleaned_data.get('username')
            password = form.cleaned_data.get('password')
            user = authenticate(username=username, password=password)
            if user is not None:
                login(request, user)
                return redirect("/")
            else:
                return render(request, "lokikirja_app/login.html", {"form": form})
        else:
            return render(request, "lokikirja_app/login.html", {"form": form})
    else:
        form = AuthenticationForm()
        return render(request, "lokikirja_app/login.html", {"form": form})

def register(request):
    """Käsittelee käyttäjän rekisteröitymisen.

    Käyttäjä täyttää lomakkeen tiedot ja lähettää ne. Jos tiedot ovat kelvolliset, 
    luodaan uusi käyttäjä ja kirjataan käyttäjä sisään. Jos tiedot eivät ole kelvolliset, 
    näytetään virheviesti.

    Args:
        request: Pyynnön olio.

    Returns:
        Ohjaa käyttäjän etusivulle jos rekister